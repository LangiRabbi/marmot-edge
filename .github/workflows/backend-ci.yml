name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feat/*' ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
          pip install -r requirements.txt

      - name: Run Black formatter check
        working-directory: backend
        run: black --check --diff .

      - name: Run isort import sorting check
        working-directory: backend
        run: isort --check-only --diff .

      - name: Run Flake8 linting
        working-directory: backend
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy type checking
        working-directory: backend
        run: mypy app --ignore-missing-imports

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        working-directory: backend
        run: |
          pip install bandit
          bandit -r app/ || true

      - name: Run Safety check for vulnerabilities
        working-directory: backend
        run: |
          pip install safety
          safety check -r requirements.txt || true

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: test_industrial_monitoring
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: Run pytest
        working-directory: backend
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/test_industrial_monitoring
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          YOLO_MODEL_PATH: yolov11n.pt
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend

  # Build and Test Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: backend
        run: |
          docker build -t industrial-monitoring-backend:test .

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-backend \
            -e DATABASE_URL=sqlite:///./test.db \
            -e SECRET_KEY=test-key \
            -p 8000:8000 \
            industrial-monitoring-backend:test

          # Wait for container to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Stop container
          docker stop test-backend

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'industrial-monitoring-backend:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: test_industrial_monitoring
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install -r requirements.txt
          pip install locust

      - name: Start application
        working-directory: backend
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/test_industrial_monitoring
        run: |
          python app/main.py &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 10

      - name: Run performance tests
        run: |
          locust --headless --users 50 --spawn-rate 5 -t 60s \
            --host http://localhost:8000 \
            -f backend/tests/performance/locustfile.py

      - name: Stop application
        run: kill $APP_PID

  # Deploy to staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build-docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: industrial-monitoring-backend
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster industrial-monitoring-staging \
            --service backend-service \
            --force-new-deployment

  # Deploy to production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release for commit ${{ github.sha }}

            ## Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Deploy to production
        run: |
          echo "Production deployment would happen here"
          # Add production deployment steps